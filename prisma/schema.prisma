generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ReferralLink {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  createdBy   User     @relation("CreatedReferrals", fields: [createdById], references: [id])
  createdById String
  usedBy      User?    @relation("UsedReferral", fields: [usedById], references: [id])
  usedById    String?  @unique
  used        Boolean  @default(false)

  @@index([createdById])
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  username String @unique
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image            UserImage?
  password         Password?
  roles            Role[]
  sessions         Session[]
  connections      Connection[]
  requests         Request[]
  createdReferrals ReferralLink[] @relation("CreatedReferrals")
  usedReferral     ReferralLink?  @relation("UsedReferral")

  sentMessages      Message[]         @relation("SentMessages")
  MessageSeen       MessageSeen[]
  moderationActions ModerationLog[]
  ownedItems        ShareItem[]       @relation("ShareItemOwner")
  claimedItems      ShareItem[]       @relation("ClaimedItems")
  images            Image[]           @relation("ImageOwner")
  reports           Report[]          @relation("UserReports")
  resolvedReports   Report[]          @relation("ModeratorResolutions")
  conversations     Conversation[]    @relation("ConversationParticipants")
  groupMemberships  GroupMembership[]

  passkey Passkey[]

  // Add notifications relation
  notifications Notification[]
}

model UserImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Image {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  purpose   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation("ImageOwner", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  group     Group?     @relation("GroupImage")
  shareItem ShareItem? @relation("ShareItemImage")

  @@index([userId])
  @@index([purpose])
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String
  entity      String
  access      String
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  type      String
  target    String
  secret    String
  algorithm String
  digits    Int
  period    Int
  charSet   String
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

enum CategoryType {
  NEED
  PRAYER
  SHARE
  GROUP
}

model Category {
  id     String       @id @default(cuid())
  type   CategoryType
  name   String
  active Boolean      @default(true)

  requests   Request[]
  shareItems ShareItem[]
  groups     Group[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, name])
  @@index([type])
  @@index([active])
}

model Request {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  type       RequestType
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String

  description String
  fulfilled   Boolean   @default(false)
  fulfilledAt DateTime?
  fulfilledBy String?
  response    Json?

  status ContentStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RequestType {
  NEED
  PRAYER
}

enum ContentStatus {
  PENDING
  ACTIVE
  REJECTED
  REMOVED
}

model Conversation {
  id            String    @id @default(cuid())
  participants  User[]    @relation("ConversationParticipants")
  lastMessageId String?   @unique
  lastMessage   Message?  @relation("LastMessage", fields: [lastMessageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  messages      Message[]
  name          String? // this is a custom name for the conversation set by the person who creeated it.  
  groupId       String?
  group         Group?    @relation("GroupConversations", fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([lastMessageId])
  @@index([groupId])
}

model MessageAttachment {
  id          String   @id @default(cuid())
  type        String // SHARE_ITEM, NEED_REQUEST, PRAYER_REQUEST, etc.
  referenceId String // ID of the referenced item
  metadata    Json // Flexible metadata for the attachment
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  messages Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender         User          @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  messageSeen    MessageSeen[]

  // TODO IDK if connecting a group directly to the message is the right way to go. seems like it should be connected through the conversation.
  // Group relation
  group   Group?  @relation("GroupMessages", fields: [groupId], references: [id], onDelete: Cascade)
  groupId String?

  // Last message relation
  lastMessageOf Conversation? @relation("LastMessage")

  // Add attachment relation
  attachment   MessageAttachment? @relation(fields: [attachmentId], references: [id])
  attachmentId String?

  @@index([senderId])
  @@index([conversationId])
  @@index([groupId])
}

model MessageSeen {
  messageId String
  userId    String
  seenAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([messageId, userId])
}

enum GroupRole {
  MEMBER
  LEADER
}

enum GroupFrequency {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  CUSTOM
}

model Group {
  id          String         @id @default(cuid())
  name        String
  description String?
  frequency   GroupFrequency @default(WEEKLY)
  meetingTime DateTime?
  location    String?
  isPrivate   Boolean        @default(true) // this determines if an admin has to approve a user to join.
  isOnline    Boolean        @default(false)
  active      Boolean        @default(true)
  capacity    Int?

  image         Image?            @relation("GroupImage", fields: [imageId], references: [id])
  imageId       String?           @unique // Unique because itâ€™s a one-to-one relation
  category      Category          @relation(fields: [categoryId], references: [id])
  categoryId    String
  memberships   GroupMembership[]
  conversations Conversation[]    @relation("GroupConversations")
  messages      Message[]         @relation("GroupMessages")

  customEventDatesJson String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([categoryId])
  @@index([active])
  @@index([active, createdAt])
  @@index([categoryId, active])
}

model GroupMembership {
  userId   String
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId  String
  group    Group            @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role     GroupRole        @default(MEMBER)
  joinedAt DateTime         @default(now())
  status   MembershipStatus @default(PENDING) // Add membership status

  @@id([userId, groupId])
  @@index([groupId])
  @@index([userId])
  @@index([role])
  @@index([status]) // Add index for status
  @@index([userId, role])
  @@index([groupId, role])
  @@index([groupId, status]) // Add index for group+status queries
}

enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ModerationType {
  NEED
  PRAYER
  MESSAGE
  USER
  GROUP
  SHARE_ITEM
}

enum ModeratorAction {
  DELETE
  FLAG
  HIDE
  RESTORE
}

model ModerationLog {
  id        String          @id @default(cuid())
  itemId    String
  itemType  ModerationType
  action    ModeratorAction
  reason    String?
  createdAt DateTime        @default(now())

  moderator   User    @relation(fields: [moderatorId], references: [id])
  moderatorId String
  report      Report? @relation("ReportModerationLog")

  @@index([itemId])
  @@index([moderatorId])
  @@index([createdAt])
}

enum ShareType {
  BORROW
  GIVE
}

model ShareItem {
  id          String @id @default(cuid())
  title       String
  description String
  location    String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  // Add imageId as the foreign key and define the relation
  image   Image?  @relation("ShareItemImage", fields: [imageId], references: [id])
  imageId String? @unique // Unique because itâ€™s a one-to-one relation

  claimed     Boolean   @default(false)
  claimedAt   DateTime?
  claimedBy   User?     @relation("ClaimedItems", fields: [claimedById], references: [id])
  claimedById String?

  shareType ShareType @default(BORROW)
  duration  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner  User   @relation("ShareItemOwner", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  status ContentStatus @default(ACTIVE)

  @@index([categoryId])
  @@index([shareType])
  @@index([userId])
  @@index([claimedById])
  @@index([status])
  @@index([imageId]) // Index the foreign key for performance
}

enum ReportableType {
  SHARE_ITEM
  MESSAGE
  USER
  GROUP
  REQUEST
}

model Report {
  id          String         @id @default(cuid())
  itemId      String
  itemType    ReportableType
  reason      ReportReason
  description String?
  status      ReportStatus   @default(PENDING)

  reportedBy User   @relation("UserReports", fields: [reporterId], references: [id])
  reporterId String

  resolvedBy   User?   @relation("ModeratorResolutions", fields: [resolvedById], references: [id])
  resolvedById String?

  moderationLog   ModerationLog? @relation("ReportModerationLog", fields: [moderationLogId], references: [id])
  moderationLogId String?        @unique

  resolution String?
  resolvedAt DateTime?
  createdAt  DateTime  @default(now())

  @@index([itemId])
  @@index([itemType])
  @@index([status])
  @@index([reporterId])
  @@index([resolvedById])
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  HARASSMENT
  SCAM
  OTHER
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model HelpFAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String   @default("General")
  order     Int      @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([active])
  @@index([order])
}

enum NotificationType {
  GROUP_JOIN_REQUEST
  GROUP_APPROVED
  GROUP_REJECTED
  SHARE_ITEM_REQUEST
  SHARE_ITEM_APPROVED
  SHARE_ITEM_REJECTED
  MESSAGE_RECEIVED
  SYSTEM_ANNOUNCEMENT
  OTHER
}

model Notification {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  type        NotificationType
  title       String
  description String?
  read        Boolean          @default(false)
  readAt      DateTime?

  // Who should receive this notification
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // Action URL for deep linking
  actionUrl String?

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String // 'singleDevice' or 'multiDevice'
  backedUp       Boolean
  transports     String? // Stored as comma-separated values

  @@index(userId)
}
