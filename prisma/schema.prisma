// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  requests    Request[]
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Category {
  id       String      @id @default(cuid())
  type     RequestType
  name     String
  active   Boolean     @default(true) // Indicates if the category is active as in visible to be used.
  requests Request[]

  @@unique([type, name])
}

model Request {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  type       RequestType // Enum to distinguish between Need and Prayer
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String

  description String

  // Fulfillment/Answering fields
  fulfilled   Boolean   @default(false) // Used for Needs
  fulfilledAt DateTime?
  fulfilledBy String? // Used for Needs

  // Generic field for additional information
  response Json? // Can store structured data or text

  // Moderation
  status  ContentStatus @default(ACTIVE)
  flagged Boolean       @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RequestType {
  NEED
  PRAYER
}

enum ContentStatus {
  PENDING
  ACTIVE
  REJECTED
  REMOVED
}

// model PodcastImage {
//   id          String @id @default(cuid())
//   contentType String
//   blob        Bytes
//
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   podcast   Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   podcastId String  @unique
//
//   @@index([podcastId])
// }
