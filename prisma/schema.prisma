// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  requests    Request[]

  messagesSent     Message[]         @relation("Sender")
  messagesReceived Message[]         @relation("RecipientUser")
  conversations    Conversation[]    @relation("ConversationParticipants") // Added this
  groupMemberships GroupMembership[]
  Conversation     Conversation?     @relation(fields: [conversationId], references: [id])
  conversationId   String?
  MessageSeen      MessageSeen[]
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Category {
  id       String      @id @default(cuid())
  type     RequestType
  name     String
  active   Boolean     @default(true) // Indicates if the category is active as in visible to be used.
  requests Request[]

  @@unique([type, name])
}

model Request {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  type       RequestType // Enum to distinguish between Need and Prayer
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String

  description String

  // Fulfillment/Answering fields
  fulfilled   Boolean   @default(false) // Used for Needs
  fulfilledAt DateTime?
  fulfilledBy String? // Used for Needs

  // Generic field for additional information
  response Json? // Can store structured data or text

  // Moderation
  status  ContentStatus @default(ACTIVE)
  flagged Boolean       @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RequestType {
  NEED
  PRAYER
}

enum ContentStatus {
  PENDING
  ACTIVE
  REJECTED
  REMOVED
}

model Conversation {
  id            String    @id @default(cuid())
  participants  User[]    @relation("ConversationParticipants")
  lastMessageId String?   @unique
  lastMessage   Message?  @relation("ConversationLastMessage", fields: [lastMessageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  messages      Message[] @relation("MessageConversation")
  groupId       String?
  group         Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  User          User[]

  @@index([lastMessageId])
  @@index([groupId])
}

model Message {
  id                      String        @id @default(cuid())
  sender                  User          @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId                String
  recipient               User?         @relation("RecipientUser", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipientId             String?
  groupId                 String?
  group                   Group?        @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content                 String
  seen                    Boolean       @default(false)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  conversation            Conversation? @relation("MessageConversation", fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  conversationId          String?
  lastMessageConversation Conversation? @relation("ConversationLastMessage")
  messageSeen             MessageSeen[]

  @@index([senderId])
  @@index([recipientId])
  @@index([groupId])
  @@index([conversationId])
  @@index([createdAt])
}

model MessageSeen {
  messageId String
  userId    String
  seenAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([messageId, userId])
}

model GroupMembership {
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId  String
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  joinedAt DateTime @default(now())

  @@id([userId, groupId])
  @@index([groupId])
  @@index([userId])
}

model Group {
  id            String            @id @default(cuid())
  name          String
  members       GroupMembership[]
  messages      Message[]
  conversations Conversation[]

  @@index([name])
}
